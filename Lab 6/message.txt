/* 1 Solve this. Fresh business scenario to apply inheritance , polymorphism   to emp based organization scenario.
Create Emp based organization structure --- Emp , Mgr , Worker
1.1 Emp state--- id(int), name, deptId , basicSalary(double)
Accept all of above in constructor arguments.
Methods ---
1.2. compute net salary ---ret 0
(eg : public double computeNetSalary(){return 0;})
1.2 Mgr state  ---id,name,basic,deptId , perfBonus
Add suitable constructor
Methods ----
1. compute net salary (formula: basic+perfBonus) -- override computeNetSalary
1.3 Worker state  --id,name,basic,deptId,hoursWorked,hourlyRate
Methods : 
1.  compute net salary (formula:  = basic+(hoursWorked*hourlyRate) --override computeNetSalary
2. get hrlyRate of the worker  -- add a new method to return hourly rate of a worker.(getter)
Create suitable array to store organization details.
Provide following options
1. Hire Manager
I/P : all manager details
2. Hire Worker  
I/P : all worker details
3. Display information of all employees net salary (by invoking computeNetSal), 
4. Exit */
#include<iostream>
#include<vector>
#include<typeinfo.h>
using namespace std;

class emp{
	int id,deptid;
	string name;
	double basicsalary;
	
	public:emp(){}
	emp(int id,int deptid,string name,double basicsalary){
            this->id=id;
            this->deptid=deptid;
            this->name=name;
            this->basicsalary=basicsalary;
            	}
           virtual void computenetsalary()=0;
		   virtual void display()=0;
	
};
class mgr:public emp{
	int id,deptid;
	string name;
	double basicsalary;
	double perfbonus;
	
	public:mgr(){
		
	}
	mgr(int id,int deptid,string name,double basicsalary,double perfbonus):emp(id,deptid,name,basicsalary){
		this->id=id;
		this->deptid=deptid;
		this->name=name;
		this->basicsalary=basicsalary;
		this->perfbonus=perfbonus;
		}
		void computenetsalary(){
		cout<<"net salary:"<<basicsalary + perfbonus<<endl;
		}
		void display(){
            cout<<"Manager id:"<<id<<endl<<"deptid:"<<deptid<<endl<<"name:"<<name<<"basicsalary:"<<basicsalary;
		}
	};
class worker:public emp{
	int id,deptid;
	string name;
	double basicsalary;
	int hoursworked;
	int hourlyrate;
	
	public:worker(){
		
	}
	worker(int id,int deptid,string name,double basicsalary,int hoursworked,int hourlyrate):emp(id,deptid,name,basicsalary){
		this->id=id;
		this->deptid=deptid;
		this->name=name;
		this->basicsalary=basicsalary;
		this->hoursworked=hoursworked;
		this->hourlyrate=hourlyrate;
		
	}
	
	
	void computenetsalary(){
		cout<<"net salary:"<<basicsalary+(hoursworked*hourlyrate);	
	}
	 void display(){
	 	cout<<"Worker id:"<<id<<endl<<"name :"<<name<<endl<<"salary:"<<basicsalary<<endl;
	 }
};
int main(){
	emp* E;
	vector<emp*> organizn;
    int id,depid,hoursworked;
    string name;
    double hourlyrate,basicsalary,perfbonus;
    int choice;
    while(true)
    {
        cout<<"\n\t---------Enter :\t\n\t1 for inputing Manager details\t\n\t2 for inputing Worker details\t\n\t3 for Display Salary of Every Employee\t\n\t4 for Exit\n------------------------\n";
        cin>>choice;
        switch(choice)
        {
            case 1:cout<<"\nEnter the Manager id: ";
                    cin>>id;
                    cout<<"Enter the Department id: ";
                    cin>>depid;
                    cout<<"Enter the Name : ";
                    cin>>name;
                    cout<<"Enter the Basic Salary: ";
                    cin>>basicsalary;
                    cout<<"Enter the performance bonus :";
                    cin>>perfbonus;
                    emp* m=new mgr(id,depid,name,basicsalary,perfbonus);
                    organizn.push_back(m);
                    
                    break;
            case 2: cout<<"\nEnter the Manager id: ";
                    cin>>id;
                    cout<<"Enter the Department id: ";
                    cin>>depid;
                    cout<<"Enter the Name : ";
                    cin>>name;
                    cout<<"Enter the Basic Salary: ";
                    cin>>basicsalary;
                    cout<<"Enter the hours worked: ";
                    cin>>hoursworked;  
                    cout<<"Enter the hourly rate: ";
                    cin>>hourlyrate;
                    emp* w=new worker(id,depid,name,basicsalary,hoursworked,hourlyrate);
                    organizn.push_back(w);
                    break;
			    case 3:  cout<<"the net salary:"<<endl;
	
	               	for(int i=0;i<organizn.size();i++){
                        if(typeid(*organizn[i])==typeid(mgr))
                        {
                            mgr *obj=dynamic_cast<mgr*>(organizn[i]);
                            obj->computenetsalary();
                        }
                        else if(typeid(*organizn[i])==typeid(worker))
                        {
                            worker *obj=dynamic_cast<worker*>(organizn[i]);
                            obj->computenetsalary();
                        }
		            }  
		              break;
	            case 4:exit(0);
				   	      
			}
		}
		return 0;
}